import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { useRouter } from "next/router";
import styled from "styled-components";
import { client, urlFor } from "../../lib/client";

const WorkInner = styled.div`
	width: 100%;
	height: 100vh;
`;

const WorkContent = styled.div`
	width: 100%;
	height: 90vh;
	display: grid;
	grid-template-columns: 0.45fr 0.55fr;
	color: #fff;
`;

const WorkDetail = styled.div`
	background-color: #000;
	padding-left: 7.5vw;
	padding-right: 3.5vw;
	display: flex;
	flex-direction: column;
	justify-content: center;
	max-width: 45vw;
`;

const WorkTItle = styled.h1`
	font-size: clamp(1rem, 5.3vw, 100rem);
	font-family: var(--ff-title);
	-webkit-text-fill-color: transparent; /* Will override color (regardless of order) */
	-webkit-text-stroke-width: 0.1rem;
	-webkit-text-stroke-color: var(--cl-white);
	font-weight: var(--fw-regular);
`;

const WorkSubTItle = styled.h2`
	font-size: clamp(1rem, 2vw, 36rem);
	font-weight: var(--fw-regular);
	margin-bottom: 2.6rem;
`;

const WorkText = styled.p`
	line-height: 3.4rem;
	font-size: clamp(1.2rem, 1.2vw, 2rem);
`;

const WorkToolInner = styled.div`
	display: flex;
	gap: 3rem;
	margin-top: 4rem;
`;

const WorkToolIcon = styled.div`
	position: relative;
	width: clamp(1rem, 3.2vw, 6.2rem);
	height: clamp(1rem, 3.2vw, 6.2rem);
	margin: 0 auto;
`;

const WorkToolText = styled.div`
	font-size: clamp(1rem, 0.9vw, 1.8rem);
	margin-top: 1rem;
	text-align: center;
`;

const BackArrow = styled.span`
	position: relative;
	cursor: pointer;
	padding-left: 3vw;
	text-transform: uppercase;
	text-decoration: underline;
	font-family: var(--ff-title);
	font-weight: var(--fw-regular);
	color: #fff;

	img {
		width: 2vw !important;
		margin-left: 0;
		transition: all 0.2s;
	}
	&:hover {
		img {
			margin-left: -1rem;
		}
	}
`;

const WorkGallery = styled.div`
	display: grid;
	gap: 4rem;
	width: 100%;
	height: 100%;
	overflow: auto;
`;

const WorkImages = styled.div`
	position: relative;
	width: 100%;
	height: 35vw;
`;

const Work = ({ work, tools }: any) => {
	// console.log(tools);
	return (
		<>
			<Head>
				<title>KKK Port | {work.title}</title>
				<meta name="description" content="Generated by create next app" />
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1.0"
				></meta>
				<link rel="icon" href="/favicon.png" />
			</Head>
			<main>
				<WorkInner>
					<WorkContent>
						<WorkDetail>
							<Link href="/">
								<BackArrow>
									<Image src="/images/arrow-back.svg" fill alt="test" />
									back
								</BackArrow>
							</Link>

							<WorkTItle>{work.title}</WorkTItle>
							<WorkSubTItle>
								{work.year} | {work.type}
							</WorkSubTItle>
							<WorkText>{work.desc}</WorkText>
							<WorkToolInner>
								{tools.map((tool: any) => (
									<div key={tool._id}>
										<WorkToolIcon>
											<Image
												src={urlFor(tool.logo).url()}
												fill
												alt={tool.title}
											/>
										</WorkToolIcon>
										<WorkToolText>{tool.title}</WorkToolText>
									</div>
								))}
							</WorkToolInner>
						</WorkDetail>
						<WorkGallery>
							{work.gallery.map((image: any) => (
								<WorkImages key={image.id}>
									<Image src={urlFor(image).url()} fill alt="trello-icon" />
								</WorkImages>
							))}
						</WorkGallery>
					</WorkContent>
					<footer
						className="footer"
						style={{ height: "10vh", display: "flex", alignItems: "center" }}
					>
						<div className="wrapper">
							<div className="footer__sup" style={{ padding: 0 }}>
								<span>
									Â©Copyright 2022 Kwan. All rights reserved. | Developed by{" "}
									<Link href="mailto:nuttsumc@gmail.com">Natchapon</Link>
								</span>
								<ul>
									<li>
										<Link
											target="_blank"
											href="https://www.linkedin.com/in/kunnapat-k/"
										>
											<span className="link">LINKEDIN</span>
											<span className="arrow">
												<Image src="/images/arrow-next-w.svg" fill alt="link" />
											</span>
										</Link>
									</li>
								</ul>
							</div>
						</div>
					</footer>
				</WorkInner>
			</main>
		</>
	);
};
export async function getStaticPaths() {
	const query = `*[_type == "work"]{
		slug{
			current
		}
	}`;

	const works = await client.fetch(query);

	const paths = works.map((work: any) => ({
		params: { slug: work.slug.current },
	}));

	return {
		paths,
		fallback: "blocking",
	};
}

export async function getStaticProps({ params: { slug } }: any) {
	const query = `*[_type == "work" && slug.current == '${slug}']`;
	const toolQuery = `*[_type == "work" && slug.current == '${slug}']{tools[]->}`;

	const work = await client.fetch(query);
	const tools = await client.fetch(toolQuery);
	return {
		// Passed to the page component as props
		props: { work: work[0], tools: tools[0].tools },
	};
}

export default Work;
